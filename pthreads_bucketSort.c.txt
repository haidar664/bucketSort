#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <pthread.h>

struct bucket {
    int n_elem;
    int index; // [start : n_elem)
    int start; // starting point in B array
};

int cmpfunc(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

void *thread_sort(void *arg);

int main(int argc, char *argv[]) {

    int *A, *B, *temp;
    int dim, n_buckets, i, w, j, limit;
    struct bucket *buckets; // array of buckets
    double t1;             // Timing variables
    float total;           // total time

    printf("Give length of array to sort \n");
    if (scanf("%d", &dim) != 1) {
        printf("error\n");
        return -1;
    }
    printf("Give number of buckets \n");
    if (scanf("%d", &n_buckets) != 1) {
        printf("error\n");
        return -1;
    }
    limit = 100000;
    w = (int)limit / n_buckets;
    A = (int *)malloc(sizeof(int) * dim);
    B = (int *)malloc(sizeof(int) * dim);

    buckets = (struct bucket *)calloc(n_buckets, sizeof(struct bucket));

    for (i = 0; i < dim; i++) {
        A[i] = random() % limit;
    }

    pthread_t threads[n_buckets];
    int args[n_buckets][3];

    t1 = clock();

    for (i = 0; i < n_buckets; i++) {
        args[i][0] = dim;
        args[i][1] = n_buckets;
        args[i][2] = i;
        pthread_create(&threads[i], NULL, thread_sort, (void *)args[i]);
    }

    for (i = 0; i < n_buckets; i++) {
        pthread_join(threads[i], NULL);
    }

    total = (float)(clock() - t1) / CLOCKS_PER_SEC;

    // Concatenate sorted buckets
    int k = 0;
    for (i = 0; i < n_buckets; i++) {
        for (j = 0; j < buckets[i].n_elem; j++) {
            B[k++] = A[buckets[i].start + j];
        }
    }

    temp = A;
    A = B;
    B = temp;

    if (dim <= 20) {
        printf("Sorted data \n");
        for (i = 0; i < dim; i++) {
            printf("%d ", A[i]);
        }
        printf("\n");
    }

    printf("Sorting %d elements took %f seconds\n", dim, total);

    int sorted = 1;
    for (i = 0; i < dim - 1; i++) {
        if (A[i] > A[i + 1])
            sorted = 0;
    }

    free(A);
    free(B);
    free(buckets);

    return 0;
}

void *thread_sort(void *arg) {
    int i, j;
    int *args = (int *)arg;
    int dim = args[0];
    int n_buckets = args[1];
    int bucket_index = args[2];

    struct bucket *buckets = (struct bucket *)calloc(n_buckets, sizeof(struct bucket));

    // Count elements for each bucket
    for (i = 0; i < dim; i++) {
        j = i % n_buckets;
        if (j == bucket_index) {
            buckets[j].n_elem++;
        }
    }

    // Calculate start index for each bucket
    int start = 0;
    for (i = 0; i < n_buckets; i++) {
        buckets[i].start = start;
        start += buckets[i].n_elem;
    }

    // Fill buckets
    for (i = 0; i < dim; i++) {
        j = i % n_buckets;
        if (j == bucket_index) {
            buckets[j].index = buckets[j].start++;
        }
    }

    // Sort each bucket
    qsort(buckets[bucket_index].start, buckets[bucket_index].n_elem, sizeof(int), cmpfunc);

    // Copy bucket data to global buckets array
    memcpy(&buckets[bucket_index], &buckets, sizeof(struct bucket));

    free(buckets);

    pthread_exit(NULL);
}
